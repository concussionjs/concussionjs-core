
/**
 * Module dependencies.
 */

var connect = require('./')
  , utils = connect.utils
  , http = require('http')
  , fs = require('fs');

// function myMiddleware(req, res, next) {
//   next();
//   // setTimeout(next, 1000);
// }
// 
// connect()
//   .use(connect.favicon())
//   // .use(connect.logger('dev'))
//   .use(myMiddleware)
//   .use(connect.errorHandler())
//   .use(function(req, res){
//     res.end('hello');
//   })
//   .listen(3000);



// http.createServer(connect()
//   .use(connect.favicon())
//   .use(connect.logger('dev'))
//   .use(function(req, res){
//     res.setHeader('Content-Type', 'text/plain');
//     res.write('foo');
//     res.write(foo);
//     res.write('baz');
//     res.end();
//   })
//   .use(function(err, req, res, next){
//     console.log('error');
//     res.statusCode = 500;
//     res.setHeader('Content-Type', 'text/plain');
//     res.end('Something broke');
//   }))
//   .listen(3000);


var redis = require('redis');

function Cache(limit) {
  this.client = redis.createClient();
  this.limit = limit;
}

Cache.prototype.touch = function(key, i){
  this.keys.splice(i,1);
  this.keys.push(key);
};

Cache.prototype.remove = function(key, fn){
  this.client.del(key, fn);
};

Cache.prototype.get = function(key){
  this.store.lrange(key, 0, -1)
  return this.store[key];
};

/**
 * Add a cache `key`.
 *
 * @param {String} key
 * @return {Array}
 * @api private
 */

Cache.prototype.add = function(key){
  // initialize store
  var len = this.keys.push(key);

  // limit reached, invalid LRU
  if (len > this.limit) this.remove(this.keys.shift());

  var arr = this.store[key] = [];
  arr.createdAt = new Date;
  return arr;
};



connect()
  .use(connect.staticCache({ maxObjects: 3, store: Cache }))
  .use(connect.static(__dirname))
  .listen(3000)

// Connect: 2700
// Connect+LRU: 7500
// node-static: 5300

// ab -n 5000 -c 50 -k http://local/Readme.md

// 
// var static = require('node-static')
//   , file = new static.Server(__dirname);
// 
// var send = connect.static(__dirname);
// http.createServer(function(req, res){
//   file.serve(req, res);
// }).listen(3000);