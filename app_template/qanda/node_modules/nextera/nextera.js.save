var mongoose = require('mongoose');
url = require("url")
path = require("path")
http = require("http")
fs = require("fs")
var db = mongoose.connect('mongodb://localhost/test');
Schema = mongoose.Schema;

var appSchema = new Schema();

appSchema.add({
port: Number});

var apps = mongoose.model("apps",appSchema);

module.exports.listen = function (server,id) {
	console.log("the id:" + id);
	var instance = new apps();
	var port;
	apps.findById(id,function(err,doc){	
		server.listen(doc.port);
		console.log("after server.address().port: " + server.address().port);
	});
}


module.exports.createServer = function(settings,createserver)
{
	var server = http.createServer(function(req,res){
		createserver(req,res);
	});
	listen(server,settings.id);
}

module.exports.createServerWithStaticFiles = function(settings,createserver)
{
        var server = http.createServer(function(req,res){
                serveStaticFiles(req,res,createserver);
        });
        listen(server,settings.id);
}


module.exports.serveStaticFiles = function(req,res,next){
              
		var uri = url.parse(req.url).pathname;
                var dirname = path.dirname(process.cwd());
		var filename = path.join(dirname,uri);		
		       
		path.exists(filename, function(exists) {               	
			if(!exists) 
			{
                        	res.writeHead(404, {"Content-Type": "text/plain"});
                        	res.write("404 Not Found\n");
                        	res.end();
				console.log(filename + " does not exist");
				return;                       	
                	}

                	if (fs.statSync(filename).isDirectory())
			{
				return;
			}

                	fs.readFile(filename, "binary", function(err, file) 
			{

                		if(err) 
				{
	                        	res.write(err + "\n");
        	                	res.end();
                	        	return;
              		}
				console.log("about to write head");
				res.writeHead(200);
                		res.write(file, "binary");
		              res.end();
			});
			return true;
		});
}

