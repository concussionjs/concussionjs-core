<% if(prod){%>
$(document).ready(function(){
<%}%>	
$('head').append("<script type='text/javascript'>var $cjs;</script>");
$('head').append("<link rel='stylesheet' href='https://<%=URLPrefix%>/css/spinner.css'>");





<%
try{
	
	objects = myObjects;
	if(version)
		testdriveURL = URLPrefix + "/" + version;
	else
		testdriveURL = URLPrefix
	
	var tenantId = tenantId;
	console.log("myObjects KnockOut: " + JSON.stringify(myObjects))
	

	if(CJSsettings)
	{
		console.log("before split 1");
		var objectNames = CJSsettings.objectName.split(",");
		console.log("after split 1");
		var securityKey = CJSsettings.securityKey;
		var securityType = CJSsettings.securityType;
		console.log("before split 2");
		var searchTargets = CJSsettings.searchTargets.split(",");
		console.log("after split 2");
	}
	else
	{
		var objectNames = [];
		var securityKey = "";
		var securityType = "";
	}
	%>
	function fields(data)
			{
				//alert(data.type);
				
				var self = this;
				self.name=ko.observable(data.name);					
				self.type=ko.observable(data.type);			
				self._id=ko.observable(data._id);
					
			}
	// handle children
	<%
	function handleChildren(myObject,counter,nextFunction)
	{
		
		if(!myObject || !myObject.name)
			return;
		console.log("before split 3 " + JSON.stringify(myObject));

		myObject.varname=myObject.name.split("_")[2];
		console.log("after split 3");
		if(myObject.name.search("_search")>-1)
		{
			console.log("inside handleChildren where myObject.name contains _search");
                        nextFunction(objects[counter+1],counter+1,handleChildren);
			return;
		}

		//console.log("at top of handle: ",myObject.name);
		if(myObject.children && myObject.children.length>0)
		{
			//console.log("I should not be here");
			for(i=0;i<myObject.children.length;i++)
			{
				//console.log("inside children loop");
				handleChildren(myObject.children[i]);
			}
		}
		%>


			var <%=myObject.name%> = function(data)
			{
				//alert(JSON.stringify(data));

				var self = this;

				<%
				//console.log("inside creating function");
				if(myObject.fields)
				{
					//console.log("inside fields");
					for(j=0;j<myObject.fields.length;j++)
					{
						//console.log("inside adding fields loop");
						if(myObject.fields[j].name!="_id")
						{
					%>
						if(data.<%=myObject.fields[j].name%>)
						{
							self.<%=myObject.fields[j].name%>=ko.observable(data.<%=myObject.fields[j].name%>);
						}
						else
						{
							self.<%=myObject.fields[j].name%>=ko.observable('');
						}
					<%
						}	
						//console.log("after processing adding field");
					}
					%>
						this.remove = function() {
							$cjs.<%=myObject.varname%>.delete (this.id(), function(result){
								$cjs.<%=myObject.name%>_getRecords();
							});
						}

						this.update = function() {
							<%
								if(securityKey)
							{%>
								self.<%=securityKey%>=cjs.readCookie("<%=securityKey%>");
							<%}%>
       						$cjs.<%=myObject.varname%>.update(this.id(),ko.toJSON(self),function(result){
       							$cjs.<%=myObject.name%>_getRecords();
       						});
    					}	
						
						self.id=ko.observable(data._id);
						self.row=ko.observable("");
						self.myForm = ko.observable("");
					<%
				}
				if(myObject.children)
				{
					//console.log("I have children");
					
					for(var i=0;i<myObject.children.length;i++)
					{
						//console.log("inside children loop");
						if(myObject.children[i].fields && myObject.children[i].fields.length>0)
						{
						%>
						if(data.<%=myObject.children[i].name%>)
							self.<%=myObject.children[i].name%> = $.map(data.<%=myObject.children[i].name%>,function(item){return new <%=myObject.children[i].name%>(item)});
						<%
						}
				
					}
					
					//console.log("after loop");
				}

		%>
			}
			
		<%
			//console.log("before calling next function ");
		
			if(objects && counter<objects.length)
			{
				//console.log("inside calling next function ", objects.length, " ",counter);
				nextFunction(objects[counter+1],counter+1,handleChildren);
			}
		
		
	}
	
	var i=0;
	
	handleChildren(objects[0],0,handleChildren);

	%>
	<% if(tenantId && tenantId!=""){%>
		cjs.createCookie("tenantId", "<%=tenantId%>");
	<%}%>
	function myViewModel()
	{
		var self = this;
	<%
	//console.log("myViewModel: ", objects.length);
	for(var i=0;i<objects.length;i++)
	{
		console.log("before split 4");
		if(!objects[i] || !objects[i].name)
			continue;
		objects[i].varname=objects[i].name.split("_")[2];
		console.log("after split 4");
		//console.log("tee: ", objects[i], " ", objects[i].type, " ", objects[i].fields.length);
		if(objects[i].varname.search("_search")>-1)
			continue;
		if(objects[i].name)
		{
		%>
		//self.<%=objects[i].varname%>=ko.observableArray([]);
		self.<%=objects[i].varname%>_search_results=ko.observableArray([]);
		//self.<%=objects[i].varname%>(self.<%=objects[i].name%>_search_results);
		self.<%=objects[i].varname%>_search_term=ko.observable();							

		<%
		}
	}
	%>
	//setFormData
	<%
	for(var i=0;i<objects.length;i++)
	{
		if(objects[i].name)
		{
	%>	
	<%=objects[i].varname%>_reset_form = function(me)
		{
			//alert(me.first_name());
	<%
		for(j=0;j<objects[i].fields.length;j++)
		{
			if(objects[i].fields[j].name!="_id")
			{
	%>
			self.<%=objects[i].varname%>.<%=objects[i].fields[j].name%>("");
	<%
			}
		}
	%>
		}

	<%
		}
	}
	%>
	//initial load
	<%
	for(var i=0;i<objects.length;i++)
	{
		 if(objects[i].name.search("_search")>-1)
                        continue;	
	%>
	self.<%=objects[i].name%>_getRecords= function(userId, callback)
	{
		<%
		if(securityKey)
		{%>
		if(!userId)
		{
			$.ajax(
				{url:"https://<%=testdriveURL%>/getEntriesByTenantObjectId/<%=objects[i].name%>?<%=securityKey%>="+cjs.readCookie("<%=securityKey%>"),
				async:false,
				dataType:"json",
				data:'',
				success:function(data){
					var mapped = $.map(data, function(item) { return new <%=objects[i].name%>(item) });
        			
        			if(callback)
        			{
        				callback(data);
        			}
        			else
        				self.<%=objects[i].varname%>.readArray(mapped);
				}			
			});
		}
		else{
			$.ajax(
				{url:"https://<%=testdriveURL%>/getEntriesByTenantObjectId/<%=objects[i].name%>?<%=securityKey%>="+userId,
				async:false,
				dataType:"json",
				data:'',
				success:function(data){
					var mapped = $.map(data, function(item) { return new <%=objects[i].name%>(item) });
        			
        			if(callback)
        			{
        				callback(data,mapped);
        			}
        			else
        				self.<%=objects[i].varname%>.readArray(mapped);
				}			
			});
		}

		<%}
		else
		{%>
		$.ajax(
			{url:"https://<%=testdriveURL%>/getEntriesByTenantObjectId/<%=objects[i].name%>",
			async:false,
			dataType:"json",
			data:'',
			success:function(data){
				var mapped = $.map(data, function(item) { return new <%=objects[i].name%>(item) });
        		if(callback)
        		{
        			callback(data,mapped);
        		}
        		else
        			self.<%=objects[i].varname%>.readArray(mapped);
			}			
		});
		<%}%>
	}
	<%
	}
	%>

	// create code
	<%
	for(var i=0;i<objects.length;i++)
	{
		 if(objects[i].name.search("_search")>-1)
                        continue;	
	%>
	//if(!self.<%=objects[i].varname%>)
		self.<%=objects[i].varname%> = {};
	self.<%=objects[i].varname%>Form = ko.observable();

    var <%=objects[i].varname%>CreateJSON = function(){
    	//console.log("in CreateJSON");
	$cjs.<%=objects[i].varname%>Form({
		<%
		if(securityKey){
		%>
			<%=securityKey%>:cjs.readCookie("<%=securityKey%>"),
		<%}%>
	<%		
	for(var j=0;j<objects[i].fields.length-1;j++)
	{
		if(objects[i].fields && objects[i].fields.length > j && objects[i].fields[j].name!="_id")
		{
		%>
			<%=objects[i].fields[j].name%>:self.<%=objects[i].varname%>.<%=objects[i].fields[j].name%>(),
		<%
		}
	}
	%><%=objects[i].fields[objects[i].fields.length-1].name%>:self.<%=objects[i].varname%>.<%=objects[i].fields[objects[i].fields.length-1].name%>()
    	});


	}
    self.<%=objects[i].varname%>.readArray = ko.observableArray([]);
    
    self.<%=objects[i].varname%>.read = function(query){
    	
    	if(query)
    	{
    		self.<%=objects[i].varname%>.queryRecords(query,function(results){
    			var mapped = $.map(results, function(item) { 
    				var x= new <%=objects[i].name%>(item);
    				return x; 
    			});
    			self.<%=objects[i].varname%>.readArray(mapped);
    		});
    		return self.<%=objects[i].varname%>.readArray;
    	}
    	else
    	{
    		self.<%=objects[i].name%>_getRecords();
    		return self.<%=objects[i].varname%>.readArray;
    	}
    }

    self.<%=objects[i].varname%>.read.last = function(query){
    	
    	if(self.<%=objects[i].varname%>.readArray().length==0)
    	{
    		if(query)
    		{
    			self.<%=objects[i].varname%>.queryRecords(query,function(results){
    				var mapped = $.map(results, function(item) { return new <%=objects[i].name%>(item) });
    				self.<%=objects[i].varname%>.readArray(mapped);
    			});
    		}
    		else
    			self.<%=objects[i].name%>_getRecords();
    		return ko.observableArray([self.<%=objects[i].varname%>.readArray()[self.<%=objects[i].varname%>.readArray().length-1]]);
    	}
    	else
    		return ko.observableArray([self.<%=objects[i].varname%>.readArray()[self.<%=objects[i].varname%>.readArray().length-1]]);	   	
    }
    		
    
    self.<%=objects[i].varname%>.read.first = function(query){
    	if(self.<%=objects[i].varname%>.readArray().length==0)
    	{
    		if(query)
    		{
    			self.<%=objects[i].varname%>.queryRecords(query,function(results){
    				var mapped = $.map(results, function(item) { return new <%=objects[i].name%>(item) });
    				self.<%=objects[i].varname%>.readArray(mapped);
    			});
    		}
    		else
    		{
    			self.<%=objects[i].name%>_getRecords();
    		}
    		return ko.observableArray([self.<%=objects[i].varname%>.readArray()[0]]);
    	}
    	else
    	{	
    		return ko.observableArray([self.<%=objects[i].varname%>.readArray()[0]]);
    	}
    }
    
    self.<%=objects[i].varname%>.readRecords = function(callback){
    	<%
		if(securityKey)
		{%>
    		self.<%=objects[i].name%>_getRecords(cjs.readCookie("<%=securityKey%>"), function(jsonArray){
    			callback(jsonArray);
    		})
    	<%
    	}
    	else
    	{%>
    		self.<%=objects[i].name%>_getRecords(null, function(jsonArray){
    			callback(jsonArray);
    		})
    	<%}%>
    }

    self.<%=objects[i].varname%>.queryRecords = function(query,callback){
    	<%
		if(securityKey)
		{%>
			query.userId=cjs.readCookie("<%=securityKey%>");
		<%
		}%>

    	$.ajax("https://<%=testdriveURL%>/getEntriesByTenantObjectId/<%=objects[i].name%>/?" + JSON.stringify(query), {
				dataType:"json",
				async:false,
				success: function(result) 
				{
        			callback(result);
				}
        });
    }
    
    self.<%=objects[i].varname%>.createRecord = function(jsonObject, callback){
    		jsonObject.tenant_object_id="<%=objects[i].name%>"
    		<%
    			if(securityKey!="")
    			{
    		%>		
    			<%=securityKey%>=cjs.readCookie("<%=securityKey%>")
    		<%
    			}
    		%>

			$.ajax("https://<%=testdriveURL%>/createInstance/<%=objects[i].name%>", {
				async:false,
				data: "{\"<%=objects[i].name%>\":" + ko.toJSON(jsonObject) + "}",
				type: "post",
				dataType: "text",
				success: function(result) 
				{
        			self.<%=objects[i].name%>_getRecords();
        			callback(result);
				}
        	});
	}


    self.<%=objects[i].varname%>.delete = function(id,callback){
    	$.ajax("https://<%=testdriveURL%>/delete/instances/"+id, {
    		data: '',
			type: "get", 
			dataType: "text",
			success: function(result)
			{
    			self.<%=objects[i].name%>_getRecords();
    			callback(result);
			}
		});
    }

    self.<%=objects[i].varname%>.update = function(id,jsonObject,callback){
    	jsonObject.tenant_object_id="<%=objects[i].name%>"
    	jsonObject.id = id;
    	<%
    		if(securityKey!="")
    		{
    	%>		
    	<%=securityKey%>=cjs.readCookie("<%=securityKey%>")
    	<%
    		}
    	%>

    	$.ajax("https://<%=testdriveURL%>/update/instances/<%=objects[i].name%>/" + id , {
			data: jsonObject,
			type: "post", dataType: "text",
			success: function(result) 
			{ 
				self.<%=objects[i].name%>_getRecords();
				callback(result);
        	}
       	});
    }     

    <%
    for(var j=0;j<objects[i].fields.length;j++)
	{
		if(objects[i].fields[j].name!="_id")
		{
		%>self.<%=objects[i].varname%>.<%=objects[i].fields[j].name%>=ko.observable("");
		<%
		}
	}
	%>

    self.<%=objects[i].varname%>.create = function() {
    	var patt = new RegExp("<%=objects[i].varname%>Form","g");
        var data = new FormData();
        if($("input:file") && $("input:file").length>0)
        {
        	$.each($("input:file")[0].files, function(i, file) {
    			data.append('file-'+i, file);
			});
        }

        var id = cjs.readCookie("userId");
        
        if(!id)
        {
        	id = cjs.readCookie("sessionId");
        }
        
        if($("input:file") && $("input:file").length>0)
        {	
        	<% if(tenantId && tenantId!=""){%>
        		var tenantId = "<%=tenantId%>";
        	<%}else{%>
        		var tenantId = "anonymous";
        	<%}%>

        	if(tenantId!='anonymous')
        	{
        		var currentFileName = "https://s3.amazonaws.com/" + "<%=testdriveURL%>".replace("api","<%=tenantId%>").replace("local-","") + "/cjs_uploads/" + id + "/" + $('#file')[0].files["0"].name
			}
			else
			{
				var currentFileName = "https://s3.amazonaws.com/cjs-uploads/" + id + "/" + $('#file')[0].files["0"].name	
			}

			var currentIndex;
			$cjs.<%=objects[i].varname%>.location = ko.observable(currentFileName);
			console.log($cjs.<%=objects[i].varname%>.location());

			<%=objects[i].varname%>CreateJSON();
    				$.ajax("https://<%=testdriveURL%>/createInstance/<%=objects[i].name%>", {
						data: "{\"<%=objects[i].name%>\":" + ko.toJSON($cjs.<%=objects[i].varname%>Form()) + "}",
						type: "post",
						dataType: "text",
						success: function(result) 
						{
        					console.log(result);

        					currentIndex=($cjs.<%=objects[i].varname%>.read()?$cjs.<%=objects[i].varname%>.read().length:0);
        					self.<%=objects[i].name%>_getRecords(null, function(){
								$cjs.<%=objects[i].varname%>.read()[currentIndex].location("https://<%=testdriveURL%>/images/loading.gif");
								var spinner = createSpinner();
								spinner.setAttribute('id','spinner' + $cjs.<%=objects[i].varname%>.read()[currentIndex].id());
								$("#" + $cjs.<%=objects[i].varname%>.read()[currentIndex].id()).parent().append(spinner);
								$("#" + $cjs.<%=objects[i].varname%>.read()[currentIndex].id()).hide();
								console.log("pre length")
								console.log($cjs.<%=objects[i].varname%>.read()[currentIndex].id() + " " + $("#" + $cjs.<%=objects[i].varname%>.read()[currentIndex].id()).length);
							});	console.log("post length")
							<%=objects[i].varname%>_reset_form();
							console.log("** currentIndex ** : " + currentIndex);
							createDNS("<%=testdriveURL%>".replace("api",tenantId).replace("local-",""),function(){	
								$.ajax({
    								url: 'https://<%=testdriveURL%>/upload/' + tenantId + '/' + id,
    								async:true,
    								data: data,
    								cache: false,
    								contentType: false,
    								processData: false,
    								type: 'POST',
    								success: function(result){
        								console.log(result);
        								$cjs.<%=objects[i].varname%>.read()[currentIndex].location(currentFileName);
        								$("#" + $cjs.<%=objects[i].varname%>.read()[currentIndex].id()).show();
        								$("#spinner" + $cjs.<%=objects[i].varname%>.read()[currentIndex].id()).hide();
    								}
								});
							});
						}
        			});	
		}
		else
		{
			<%=objects[i].varname%>CreateJSON();
        	self.<%=objects[i].varname%>.createRecord($cjs.<%=objects[i].varname%>Form(), function(){
				<%=objects[i].varname%>_reset_form();
        	});


		}
        

       
    }
    
    self.<%=objects[i].varname%>.searchRecords= function(searchTerm, userId, callback){
    	var url = "";
    	if(userId && userId!="")
    	{
    		url="https://<%=testdriveURL%>/search/id_<%=tenantId%>_" + "<%=objects[i].varname%>" + "/" + userId +"/" + searchTerm;
    	}
    	else
    	{
    		url="https://<%=testdriveURL%>/search/id_<%=tenantId%>_" + "<%=objects[i].varname%>" + "/" + searchTerm;	
    	}

    	$.getJSON(url, function(allData) {
            callback(allData);
        });
    }	 
    
	self.<%=objects[i].varname%>.search = function(searchTerm) {
		//alert(self.<%=objects[i].name%>_search_term());
		if(searchTerm=="")
		{
			if(cjs.readCookie("userId"))
			{
				self.<%=objects[i].name%>_getRecords(cjs.readCookie("userId"));
			}
			else
			{
				self.<%=objects[i].name%>_getRecords();
			}
		}
		else
		{
			self.<%=objects[i].varname%>.searchRecords(searchTerm,cjs.readCookie("userId"),function(allData){
            	var mapped = $.map(allData, function(item) { return new <%=objects[i].name%>(item.obj) });
            	//self.<%=objects[i].varname%>_search_results(mapped);
				self.<%=objects[i].varname%>.read(mapped);
        	});
		}
    }
	<%
	}
	%>
	}

	<% 	if(searchTargets)
		{
			for(var i=0;i<searchTargets.length;i++)
			{
	%>
			$("#search").change(function(){
           	 	console.log("searching for " + $("#search").val());
            	$cjs.<%=searchTargets[i]%>.search($("#search").val());
        	});
	<%
			}
		}
	%>

	$cjs = new myViewModel();
		
		ko.applyBindings($cjs);

<%
	//for(var i=0;i<objects.length;i++)
	//{
	//%>
	//	$cjs.<%=objects[i].name%>_getRecords();
	//	console.log("self " + ko.toJSON($cjs));
	//<%
	//}	
%>	
	<% 
	var securityTypes = (securityType&&securityType!="")?securityType.split(' '):[];
	for(var i=0;i<securityTypes.length;i++)
	{
		if(securityTypes[i]=="")
		{
			break;
		}
		var mainjs = fs.readFileSync(dirname + '/security/' + securityTypes[i] + '/main.js', 'utf-8');
		var maincss = fs.readFileSync(dirname + '/security/' + securityTypes[i] + '/main.css', 'utf-8');
	%>
		$.ajax({
            url:"https://<%=URLPrefix%>/security/<%=securityTypes[i]%>/main.css",
            success:function(data){
                 $("<style></style>").appendTo("head").html(data.replace(/@@CJS_WEB_URL@@/g,"<%=URLPrefix%>"));
            }
        });

        $('body').append("<script type='text/javascript'><%=ejs.render(mainjs, {locals: {'dirname':dirname,'myObjects': myObjects,'URLPrefix':URLPrefix, 'CJSsettings':CJSsettings}}).replace(/\n/g,"")%></script>");
     
        function createSpinner()
        {
        	var wrapper = document.createElement('div');
        	var div = document.createElement('div');
			var spanC = document.createElement('span');
			var spanDSpin = document.createElement('span');
			var spanE = document.createElement('span');
			var spanRR1 = document.createElement('span');
			var spanRR2 = document.createElement('span');
			var spanRR3 = document.createElement('span');
			var spanRR4 = document.createElement('span');
			
			wrapper.setAttribute('style','inline-block');
			wrapper.setAttribute('class','spinnerWrapper');
			div.setAttribute('class','loader rspin');
			spanC.setAttribute('class','c');
			spanDSpin.setAttribute('class','d spin');
			spanE.setAttribute('class','e');
			spanRR1.setAttribute('class','r r1');
			spanRR2.setAttribute('class','r r2');
			spanRR3.setAttribute('class','r r3');
			spanRR4.setAttribute('class','r r4');
			
			div.appendChild(spanC);
			spanDSpin.appendChild(spanE);
			div.appendChild(spanDSpin);
			div.appendChild(spanRR1);
			div.appendChild(spanRR2);
			div.appendChild(spanRR3);
			div.appendChild(spanRR4);
			wrapper.appendChild(div);
		
			return wrapper;
        }

        var checkIfDNSExists = function(dnsName,callback)
		{
			$.get('https://<%=testdriveURL%>/getDNSNames/'+dnsName, function(data){
				callback(JSON.parse(data).ResourceRecordSets.length > 0 && JSON.parse(data).ResourceRecordSets[0].Name==dnsName+"." );
			});

			return;
		}

		var createDNS = function(dnsName, callback)
		{
			checkIfDNSExists(dnsName,function(doesExist){
				if(!doesExist)
				{
					$.get('https://<%=testdriveURL%>/createbucket/'+dnsName, function(data){
						console.log(data);
						$.get('https://<%=testdriveURL%>/enablewebconfig/'+dnsName, function(data){
							console.log(data);
							$.get('https://<%=testdriveURL%>/adddns/'+dnsName, function(data){
								console.log(data);
								callback("success");
							});
						});
					});
				}
				else
				{
					callback("exists");
				}
			});
		}

	<%
	}%> 


$cjs.Object=function(){
	var mySelf = this;
	this.save = function(callback){
		if(mySelf._id)
		{
			$.ajax("https://<%=testdriveURL%>/update/instances/" + mySelf.tenant_object_id +"/" + mySelf._id , {
				async:false,
				data: ko.toJSON(mySelf),
				type: "post", 
				dataType: "text",
				success: function(result) 
				{ 
					if(callback)
						callback("success");
					
        		}
       		});
		}
		else{
			$.ajax("https://<%=testdriveURL%>/createInstance/" + mySelf.tenant_object_id, {
				async:false,
				data: "{\"" + mySelf.tenant_object_id + "\":" + ko.toJSON(mySelf) + "}",
				type: "post",
				dataType: "text",
				success: function(result) 
				{
        			mySelf._id=JSON.parse(result)[0]._id;
        
        			if(callback)
        				callback($.extend(mySelf,JSON.parse(result)));
        			$.extend(mySelf,JSON.parse(result));

				}
    		});
		}
	}
	this.query=function(query,callback){
		var mySelf = this;
		if(typeof query == "string")
		{
			query={"_id":query};
		}
		$.ajax("https://<%=testdriveURL%>/getEntriesByTenantObjectId/"+ mySelf.tenant_object_id+"/?" + JSON.stringify(query), {
				async:false,
				success: function(result) 
				{
					if(callback)
        				callback($.extend(JSON.parse(result),mySelf));
        			$.extend(mySelf,JSON.parse(result));
				}
        });
	}
	this.deleteRecord=function(callback,id){
		var mySelf = this;
		if(mySelf._id || id)
		{
			$.ajax("https://<%=testdriveURL%>/delete/instances/"+(id?id:mySelf._id), {
    			async:false,
    			data: '',
				type: "get", 
				dataType: "text",
				success: function(result)
				{
					if(callback)
    					callback(result);
    				else
    					console.log("result " + JSON.stringify(result));
				}
			});
		}
		else
		{
			var error={};
			error.result="failed"
			error.message=("Delete failed. Objects _id property was not set");
			
			if(callback)
			{
				callback(error);
			}
			else
			{
				console.log("error " + JSON.stringify(error));
			}
		}
	}

	this.deleteByQuery=function(query,callback){
		var mySelf = this;
		var resultsArr=[];
		mySelf.query(query,function(results){
			
			for(var i=0;i<results.length;i++)
			{
				mySelf.deleteRecord(function(result){
					resultsArr[resultsArr.length]=result;
				},results[i]._id);
			}
		});
		
		if(callback)
			callback(resultsArr);
		else
			return resultsArr;
	}

};

$cjs.Object.extend =  function(objectName)
{
	var obj = new $cjs.Object();

	obj.name = objectName;
	obj.tenant_object_id = "id_"+ (cjs.readCookie("tenantId")?cjs.readCookie("tenantId"):cjs.readCookie("sessionId")) + "_" +objectName;

	return obj;
}

$cjs.User=function()
{
	this.username="";
	this.password="";
	this.logIn = function(username,password,callback)
	{
		var innerMySelf = $cjs.Object.extend("user");
		innerMySelf.query({"username":username},function(results){
			if(results && results.length>0 && results[0])
			{
				if(results[0].password==password)
				{
					var user = results[0];
					
					var success = {};
					success.user = user;
					success.result = "success";
					success.message = "You were successfully logged in";
					if(callback)
						callback(success);
					return success;
				}
				else
				{
					var error = {};
					error.result = "error";
					error.message = "Your password did not match what was on file";
					if(callback)
						callback(error);
					return error;
				}
			}
			else
			{
				var error = {};
				error.result = "error";
				error.message = "Your username could not be found in our records";
				if(callback)
					callback(error);
				return error;
			}
		});
	}
	
	this.save = function(callback){
		var innerMySelf = $cjs.Object.extend("user");
		var mySelf= this;

		// check to see if a password was set
		if(this.password && this.password!="")
		{
			// if a password was set on the User object, then mySelf password field to that password value
			mySelf.password=this.password;
		}
		
		//check to see if both the username and password values were set properly
		if(mySelf.username && mySelf.password)
		{
			//if both username and password were set properly, then query for existing username object 
			innerMySelf.query({"username":mySelf.username,"password":mySelf.password},function(results){
				if(results && results[0])
				{
					//if there are results, then save user object because it could have new values set
					if(innerMySelf.newPassword)
					{
						// if newPassword field was set, then override the original password field with the newPassword value
						innerMySelf.password=innerMySelf.newPassword;
					}
					mySelf._id = results[0]._id;
					mySelf.tenant_object_id = results[0].tenant_object_id;
					console.log(JSON.stringify(results[0]) + " " + JSON.stringify(mySelf));
					console.log(ko.toJSON($.extend(results[0],mySelf)));
					$.ajax("https://<%=testdriveURL%>/update/instances/" + mySelf.tenant_object_id +"/" + mySelf._id  , {
						async:false,
						data: ko.toJSON($.extend(results[0],mySelf)),
						type: "post", 
						dataType: "text",
						success: function(result) 
						{ 
							if(callback)
								callback(result);
							else
								console.log("save result: " + JSON.stringify(result));
        				}
       				});
				}
				else{
					//if no results were found, then the user is new and a record should be created
					$.ajax("https://<%=testdriveURL%>/createInstance/" + innerMySelf.tenant_object_id, {
						async:false,
						data: "{\"" + mySelf.tenant_object_id + "\":" + ko.toJSON(mySelf) + "}",
						type: "post",
						dataType: "text",
						success: function(result) 
						{
        					// we set the _id 
        					mySelf._id=JSON.parse(result)[0]._id;
        					
        					if(callback)
        						callback(result);
        					else
        					console.log("save result: " + JSON.stringify(result));
						}
    				});
				}
			});
		}
	}
}

<%if(prod){%>
});
<%}%>	

<%}catch(error){console.log("\n\n\n***",error.stack," ",error.message,"****\n\n\n");}%>